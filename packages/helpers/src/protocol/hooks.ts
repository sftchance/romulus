// Generated by @wagmi/cli@1.0.0 on 5/10/2023 at 1:45:19 AM
import {
    getContract,
    GetContractArgs,
    readContract,
    ReadContractConfig,
    writeContract,
    WriteContractArgs,
    WriteContractPreparedArgs,
    WriteContractUnpreparedArgs,
    prepareWriteContract,
    PrepareWriteContractConfig,
    watchContractEvent,
    WatchContractEventConfig,
    WatchContractEventCallback,
} from "wagmi/actions"

import {
    useContractRead,
    UseContractReadConfig,
    useContractWrite,
    UseContractWriteConfig,
    usePrepareContractWrite,
    UsePrepareContractWriteConfig,
    useContractEvent,
    UseContractEventConfig,
} from "wagmi"
import { ReadContractResult, WriteContractMode, PrepareWriteContractResult } from "wagmi/actions"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Lock
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const lockABI = [
    {
        stateMutability: "payable",
        type: "constructor",
        inputs: [{ name: "_unlockTime", internalType: "uint256", type: "uint256" }],
    },
    { type: "error", inputs: [], name: "Lock__UnlockTimeShouldBeInTheFuture" },
    { type: "error", inputs: [], name: "Lock__YouArentTheOwner" },
    { type: "error", inputs: [], name: "Lock__YouCantWithdrawYet" },
    {
        type: "event",
        anonymous: false,
        inputs: [
            { name: "amount", internalType: "uint256", type: "uint256", indexed: false },
            { name: "when", internalType: "uint256", type: "uint256", indexed: false },
        ],
        name: "Withdrawal",
    },
    {
        stateMutability: "view",
        type: "function",
        inputs: [],
        name: "owner",
        outputs: [{ name: "", internalType: "address payable", type: "address" }],
    },
    {
        stateMutability: "view",
        type: "function",
        inputs: [],
        name: "unlockTime",
        outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    },
    { stateMutability: "nonpayable", type: "function", inputs: [], name: "withdraw", outputs: [] },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Core
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link lockABI}__.
 */
export function getLock(config: Omit<GetContractArgs, "abi">) {
    return getContract({ abi: lockABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link lockABI}__.
 */
export function readLock<TAbi extends readonly unknown[] = typeof lockABI, TFunctionName extends string = string>(
    config: Omit<ReadContractConfig<TAbi, TFunctionName>, "abi">,
) {
    return readContract({ abi: lockABI, ...config } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

// satisfy the error:
// The inferred type of 'readLock' cannot be named without a reference to '.pnpm/abitype@0.8.2_typescript@5.0.2_zod@3.21.4/node_modules/abitype'. This is likely not portable. A type annotation is necessary.ts(2742)



/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link lockABI}__.
 */
export function writeLock<TFunctionName extends string>(
    config:
        | Omit<WriteContractPreparedArgs<typeof lockABI, TFunctionName>, "abi">
        | Omit<WriteContractUnpreparedArgs<typeof lockABI, TFunctionName>, "abi">,
) {
    return writeContract({ abi: lockABI, ...config } as unknown as WriteContractArgs<typeof lockABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link lockABI}__.
 */
export function prepareWriteLock<
    TAbi extends readonly unknown[] = typeof lockABI,
    TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, "abi">) {
    return prepareWriteContract({ abi: lockABI, ...config } as unknown as PrepareWriteContractConfig<
        TAbi,
        TFunctionName
    >)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link lockABI}__.
 */
export function watchLockEvent<TAbi extends readonly unknown[] = typeof lockABI, TEventName extends string = string>(
    config: Omit<WatchContractEventConfig<TAbi, TEventName>, "abi">,
    callback: WatchContractEventCallback<TAbi, TEventName>,
) {
    return watchContractEvent({ abi: lockABI, ...config } as WatchContractEventConfig<TAbi, TEventName>, callback)
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockABI}__.
 */
export function useLockRead<
    TFunctionName extends string,
    TSelectData = ReadContractResult<typeof lockABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof lockABI, TFunctionName, TSelectData>, "abi"> = {} as any) {
    return useContractRead({ abi: lockABI, ...config } as UseContractReadConfig<
        typeof lockABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockABI}__ and `functionName` set to `"owner"`.
 */
export function useLockOwner<
    TFunctionName extends "owner",
    TSelectData = ReadContractResult<typeof lockABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof lockABI, TFunctionName, TSelectData>, "abi" | "functionName"> = {} as any) {
    return useContractRead({ abi: lockABI, functionName: "owner", ...config } as UseContractReadConfig<
        typeof lockABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockABI}__ and `functionName` set to `"unlockTime"`.
 */
export function useLockUnlockTime<
    TFunctionName extends "unlockTime",
    TSelectData = ReadContractResult<typeof lockABI, TFunctionName>,
>(config: Omit<UseContractReadConfig<typeof lockABI, TFunctionName, TSelectData>, "abi" | "functionName"> = {} as any) {
    return useContractRead({ abi: lockABI, functionName: "unlockTime", ...config } as UseContractReadConfig<
        typeof lockABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockABI}__.
 */
export function useLockWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
    config: TMode extends "prepared"
        ? UseContractWriteConfig<
            PrepareWriteContractResult<typeof lockABI, string>["request"]["abi"],
            TFunctionName,
            TMode
        >
        : UseContractWriteConfig<typeof lockABI, TFunctionName, TMode> & {
            abi?: never
        } = {} as any,
) {
    return useContractWrite<typeof lockABI, TFunctionName, TMode>({ abi: lockABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockABI}__ and `functionName` set to `"withdraw"`.
 */
export function useLockWithdraw<TMode extends WriteContractMode = undefined>(
    config: TMode extends "prepared"
        ? UseContractWriteConfig<
            PrepareWriteContractResult<typeof lockABI, "withdraw">["request"]["abi"],
            "withdraw",
            TMode
        > & { functionName?: "withdraw" }
        : UseContractWriteConfig<typeof lockABI, "withdraw", TMode> & {
            abi?: never
            functionName?: "withdraw"
        } = {} as any,
) {
    return useContractWrite<typeof lockABI, "withdraw", TMode>({
        abi: lockABI,
        functionName: "withdraw",
        ...config,
    } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockABI}__.
 */
export function usePrepareLockWrite<TFunctionName extends string>(
    config: Omit<UsePrepareContractWriteConfig<typeof lockABI, TFunctionName>, "abi"> = {} as any,
) {
    return usePrepareContractWrite({ abi: lockABI, ...config } as UsePrepareContractWriteConfig<
        typeof lockABI,
        TFunctionName
    >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareLockWithdraw(
    config: Omit<UsePrepareContractWriteConfig<typeof lockABI, "withdraw">, "abi" | "functionName"> = {} as any,
) {
    return usePrepareContractWrite({
        abi: lockABI,
        functionName: "withdraw",
        ...config,
    } as UsePrepareContractWriteConfig<typeof lockABI, "withdraw">)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lockABI}__.
 */
export function useLockEvent<TEventName extends string>(
    config: Omit<UseContractEventConfig<typeof lockABI, TEventName>, "abi"> = {} as any,
) {
    return useContractEvent({ abi: lockABI, ...config } as UseContractEventConfig<typeof lockABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lockABI}__ and `eventName` set to `"Withdrawal"`.
 */
export function useLockWithdrawalEvent(
    config: Omit<UseContractEventConfig<typeof lockABI, "Withdrawal">, "abi" | "eventName"> = {} as any,
) {
    return useContractEvent({ abi: lockABI, eventName: "Withdrawal", ...config } as UseContractEventConfig<
        typeof lockABI,
        "Withdrawal"
    >)
}
